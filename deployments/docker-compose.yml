version: '3.9'

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - order-network

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - order-network

  order-service:
    build:
      context: ../
      dockerfile: deployments/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: orders_db
      DB_USER: order_user
      DB_PASSWORD: order_password
      DB_SSLMODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      REDIS_DIAL_TIMEOUT: 5s
      REDIS_READ_TIMEOUT: 3s
      REDIS_WRITE_TIMEOUT: 3s
      REDIS_POOL_SIZE: 10
      REDIS_TLS: false
    ports:
      - "8081:8081"
    networks:
      - order-network

volumes:
  postgres_data:
  redis_data:

networks:
  order-network:
    driver: bridge