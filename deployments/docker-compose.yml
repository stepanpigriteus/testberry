version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - order-network

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - order-network

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - order-network

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - order-network

  order-service:
    build:
      context: ../
      dockerfile: deployments/Dockerfile
    depends_on:
      - kafka
      - postgres
      - redis
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: orders
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: orders_db
      DB_USER: order_user
      DB_PASSWORD: order_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    ports:
      - "8081:8081"
    networks:
      - order-network

  kafka-init:
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      until kafka-topics --bootstrap-server kafka:9092 --list; do
        echo 'Waiting for Kafka mtfk'
        sleep 2
      done
      kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic orders
      echo 'Kafka topic created'
      "
    networks:
      - order-network

volumes:
  postgres_data:
  redis_data:

networks:
  order-network:
    driver: bridge